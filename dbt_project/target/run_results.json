{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-06-05T05:18:48.754700Z", "invocation_id": "92998bea-931f-491c-8f5a-f48dd7104d5a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:25.633370Z", "completed_at": "2025-06-05T05:18:25.660120Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:25.742309Z", "completed_at": "2025-06-05T05:18:27.191504Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5917048454284668, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084ce"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.stg_trading_books", "compiled": true, "compiled_code": "with source as (\n    select * from dbt_hol_2025_prod.public.trading_books\n),\n\nrenamed as (\n    select\n        trade_id,\n        trade_date,\n        trader_name,\n        desk,\n        ticker,\n        quantity,\n        price,\n        trade_type,\n        notes\n    from source\n)\n\nselect * from renamed", "relation_name": "dbt_hol_2025_prod.public_01_staging.stg_trading_books", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:25.644500Z", "completed_at": "2025-06-05T05:18:25.682030Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:25.753104Z", "completed_at": "2025-06-05T05:18:27.220471Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.620025634765625, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.stg_weights", "compiled": true, "compiled_code": "with source as (\n    select *\n    from dbt_hol_2025_prod.public.weights_table\n),\nrenamed as (\n    select region,\n        desk,\n        target_allocation\n    from source\n)\nselect *\nfrom renamed", "relation_name": "dbt_hol_2025_prod.public_01_staging.stg_weights", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:25.603524Z", "completed_at": "2025-06-05T05:18:25.658598Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:25.660803Z", "completed_at": "2025-06-05T05:18:28.383941Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.7854692935943604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084d2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.stg_forex_metrics", "compiled": true, "compiled_code": "with source as (\n    select * from FOREX_TRACKING_CURRENCY_EXCHANGE_RATES_BY_DAY.STOCK.FOREX_METRICS\n),\nrenamed as (\n    select\n        run_date,\n        currency_pair_name,\n        open as open_rate,\n        high as high_rate,\n        low as low_rate,\n        close as close_rate\n    from source   \n)\n\nselect * from renamed \nwhere 1=1 \n  AND run_date >= '2024-01-01'", "relation_name": "dbt_hol_2025_prod.public_01_staging.stg_forex_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:25.622120Z", "completed_at": "2025-06-05T05:18:25.659458Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:25.698003Z", "completed_at": "2025-06-05T05:18:28.460982Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.8617868423461914, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.stg_stock_metrics", "compiled": true, "compiled_code": "with source as (\n    select * from STOCK_TRACKING_US_STOCK_PRICES_BY_DAY.STOCK.US_STOCK_METRICS\n),\n\nrenamed as (\n    select\n        run_date,\n        ticker,\n        open as open_price,\n        high as high_price,\n        low as low_price,\n        close as close_price,\n        volume\n    from source\n)\n\nselect * from renamed \nwhere 1=1 \n  AND run_date >= '2024-01-01'", "relation_name": "dbt_hol_2025_prod.public_01_staging.stg_stock_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:27.200071Z", "completed_at": "2025-06-05T05:18:27.224189Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:27.224972Z", "completed_at": "2025-06-05T05:18:31.489346Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 4.29082989692688, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.int_extracted_entities", "compiled": true, "compiled_code": "\n\nwith trading_books as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_trading_books\n),\n\n-- Extract sentiment using SNOWFLAKE.CORTEX.SENTIMENT\ncst as (\n    select\n        trade_id,\n        trade_date,\n        trader_name,\n        desk,\n        ticker,\n        quantity,\n        price,\n        trade_type,\n        notes,\n        SNOWFLAKE.CORTEX.SENTIMENT(notes) as sentiment,\n        SNOWFLAKE.CORTEX.EXTRACT_ANSWER(notes, 'What is the signal driving the following trade?') as signal,\n        SNOWFLAKE.CORTEX.CLASSIFY_TEXT(notes||': '|| signal[0]:\"answer\"::string,['Market Signal','Execution Strategy']):\"label\"::string as trade_driver\n    from trading_books\n    where notes is not null\n)\nselect * from cst", "relation_name": "dbt_hol_2025_prod.public_02_intermediate.int_extracted_entities", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:28.466955Z", "completed_at": "2025-06-05T05:18:28.482727Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:28.483942Z", "completed_at": "2025-06-05T05:18:32.827984Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 4.362499952316284, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a60904708502"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.int_equity_trade_pnl", "compiled": true, "compiled_code": "with trading_books as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_trading_books\n    where desk = 'Equity Desk'\n),\n\nstock_metrics as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_stock_metrics\n),\n\n-- Match BUY and SELL trades for the same ticker and trader\nmatched_trades as (\n    select \n        b1.trade_id as buy_trade_id,\n        b1.trade_date as buy_date,\n        b1.trader_name,\n        b1.desk,\n        b1.ticker,\n        b1.quantity,\n        b1.price as buy_price,\n        b2.trade_id as sell_trade_id,\n        b2.trade_date as sell_date,\n        b2.price as sell_price,\n        b2.notes as sell_notes\n    from trading_books b1\n    join trading_books b2\n        on b1.ticker = b2.ticker\n        and b1.trader_name = b2.trader_name\n        and b1.trade_type = 'BUY'\n        and b2.trade_type = 'SELL'\n        and b1.trade_date <= b2.trade_date\n),\n\n-- Calculate P&L for matched trades\nmatched_trades_pnl as (\n    select\n        m.*,\n        (m.sell_price - m.buy_price) * m.quantity as pnl,\n        (m.sell_price - m.buy_price) * m.quantity as pnl_usd  -- Same as pnl since already in USD\n    from matched_trades m\n),\n\n-- Calculate P&L for individual trades\ntrade_pnl as (\n    select\n        t.trade_id,\n        t.trade_date,\n        t.trader_name,\n        t.desk,\n        t.ticker,\n        t.quantity,\n        t.price as trade_price,\n        t.trade_type,\n        t.notes,\n        s.open_price as day_open,\n        s.close_price as day_close,\n        -- Calculate percentage differences from market prices\n        case \n            when t.trade_type = 'BUY' then\n                round(((s.open_price - t.price) / s.open_price) * 100, 2)\n            when t.trade_type = 'SELL' then\n                round(((t.price - s.open_price) / s.open_price) * 100, 2)\n        end as vs_open_performance_pct,\n        case \n            when t.trade_type = 'BUY' then\n                round(((s.close_price - t.price) / s.close_price) * 100, 2)\n            when t.trade_type = 'SELL' then\n                round(((t.price - s.close_price) / s.close_price) * 100, 2)\n        end as vs_close_performance_pct,\n        -- Calculate overall market performance for the day\n        round(((s.close_price - s.open_price) / s.open_price) * 100, 2) as market_daily_performance_pct,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < s.open_price then 'Better than open'\n                    when t.price > s.open_price then 'Worse than open'\n                    else 'Equal to open'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > s.open_price then 'Better than open'\n                    when t.price < s.open_price then 'Worse than open'\n                    else 'Equal to open'\n                end\n        end as vs_open_price,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < s.close_price then 'Better than close'\n                    when t.price > s.close_price then 'Worse than close'\n                    else 'Equal to close'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > s.close_price then 'Better than close'\n                    when t.price < s.close_price then 'Worse than close'\n                    else 'Equal to close'\n                end\n        end as vs_close_price,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < s.open_price and t.price < s.close_price then 'Best price of day'\n                    when t.price > s.open_price and t.price > s.close_price then 'Worst price of day'\n                    else 'Middle price of day'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > s.open_price and t.price > s.close_price then 'Best price of day'\n                    when t.price < s.open_price and t.price < s.close_price then 'Worst price of day'\n                    else 'Middle price of day'\n                end\n        end as price_performance,\n        -- Calculate relative performance vs market\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < s.open_price and t.price < s.close_price then\n                        round(((s.close_price - t.price) / t.price) * 100, 2)\n                    when t.price > s.open_price and t.price > s.close_price then\n                        round(((s.close_price - t.price) / t.price) * 100, 2)\n                    else\n                        round(((s.close_price - t.price) / t.price) * 100, 2)\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > s.open_price and t.price > s.close_price then\n                        round(((t.price - s.open_price) / s.open_price) * 100, 2)\n                    when t.price < s.open_price and t.price < s.close_price then\n                        round(((t.price - s.open_price) / s.open_price) * 100, 2)\n                    else\n                        round(((t.price - s.open_price) / s.open_price) * 100, 2)\n                end\n        end as relative_performance_pct\n    from trading_books t\n    -- left join stock_metrics s\n    join stock_metrics s\n        on t.ticker = s.ticker\n        and t.trade_date = s.run_date\n)\n\n-- Combine matched trades P&L with individual trade performance\nselect \n    t.*,\n    m.pnl,\n    m.pnl_usd,\n    m.buy_trade_id,\n    m.sell_trade_id,\n    m.buy_date,\n    m.sell_date,\n    m.buy_price,\n    m.sell_price,\n    m.sell_notes\nfrom trade_pnl t\n-- left join matched_trades_pnl m\njoin matched_trades_pnl m\n    on t.trade_id = m.buy_trade_id\n    or t.trade_id = m.sell_trade_id", "relation_name": "dbt_hol_2025_prod.public_02_intermediate.int_equity_trade_pnl", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:31.495779Z", "completed_at": "2025-06-05T05:18:31.508022Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:31.508642Z", "completed_at": "2025-06-05T05:18:34.247295Z"}], "thread_id": "Thread-13 (worker)", "execution_time": 2.753082036972046, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a60904708516"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.fct_trader_drivers", "compiled": true, "compiled_code": "\n\nwith extracted_entities as (\n    select * from dbt_hol_2025_prod.public_02_intermediate.int_extracted_entities\n),\n\n-- Calculate trade driver statistics by trader\ntrader_driver_stats as (\n    select\n        trader_name,\n        trade_driver,\n        count(*) as total_trades,\n        array_agg(distinct signal[0]:\"answer\"::string) as signals_used\n    from extracted_entities\n    where trade_driver is not null\n    group by 1, 2\n),\n\n-- Calculate total trades per trader for percentage calculation\ntrader_totals as (\n    select\n        trader_name,\n        sum(total_trades) as total_trades\n    from trader_driver_stats\n    group by 1\n),\n\n-- Combine statistics with percentages\nfinal_stats as (\n    select\n        tds.trader_name,\n        tds.trade_driver,\n        tds.total_trades,\n        tds.signals_used,\n        round(tds.total_trades * 100.0 / nullif(tt.total_trades, 0), 2) as driver_percentage\n    from trader_driver_stats tds\n    join trader_totals tt\n        on tds.trader_name = tt.trader_name\n)\n\nselect * from final_stats\norder by trader_name, total_trades desc", "relation_name": "dbt_hol_2025_prod.public_03_marts.fct_trader_drivers", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:28.390226Z", "completed_at": "2025-06-05T05:18:28.402766Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:28.403358Z", "completed_at": "2025-06-05T05:18:35.726224Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 7.337470769882202, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a609047084fe"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.int_fx_trade_pnl", "compiled": true, "compiled_code": "with trading_books as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_trading_books\n    where desk = 'FX Desk'\n),\n\nforex_metrics as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_forex_metrics\n),\n\n-- Match BUY and SELL trades for the same ticker and trader\nmatched_trades as (\n    select \n        b1.trade_id as buy_trade_id,\n        b1.trade_date as buy_date,\n        b1.trader_name,\n        b1.desk,\n        b1.ticker,\n        b1.quantity,\n        b1.price as buy_price,\n        b2.trade_id as sell_trade_id,\n        b2.trade_date as sell_date,\n        b2.price as sell_price,\n        b2.notes as sell_notes\n    from trading_books b1\n    join trading_books b2\n        on b1.ticker = b2.ticker\n        and b1.trader_name = b2.trader_name\n        and b1.trade_type = 'BUY'\n        and b2.trade_type = 'SELL'\n        -- and b1.trade_date <= b2.trade_date\n        and b1.trade_date = b2.trade_date\n),\n\n-- Calculate P&L for matched trades\nmatched_trades_pnl as (\n    select\n        m.*,\n        f.close_rate,\n        (m.sell_price - m.buy_price) * m.quantity as pnl,\n        (m.sell_price - m.buy_price) * m.quantity * f.close_rate as pnl_usd\n    from matched_trades m\n    -- left join forex_metrics f\n    join forex_metrics f\n        on m.ticker = f.currency_pair_name\n        and m.sell_date = f.run_date\n),\n\n-- Calculate P&L for individual trades\ntrade_pnl as (\n    select\n        t.trade_id,\n        t.trade_date,\n        t.trader_name,\n        t.desk,\n        t.ticker,\n        t.quantity,\n        t.price as trade_price,\n        t.trade_type,\n        t.notes,\n        f.open_rate as day_open,\n        f.close_rate as day_close,\n        -- Calculate percentage differences from market prices\n        case \n            when t.trade_type = 'BUY' then\n                round(((f.open_rate - t.price) / f.open_rate) * 100, 2)\n            when t.trade_type = 'SELL' then\n                round(((t.price - f.open_rate) / f.open_rate) * 100, 2)\n        end as vs_open_performance_pct,\n        case \n            when t.trade_type = 'BUY' then\n                round(((f.close_rate - t.price) / f.close_rate) * 100, 2)\n            when t.trade_type = 'SELL' then\n                round(((t.price - f.close_rate) / f.close_rate) * 100, 2)\n        end as vs_close_performance_pct,\n        -- Calculate overall market performance for the day\n        round(((f.close_rate - f.open_rate) / f.open_rate) * 100, 2) as market_daily_performance_pct,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < f.open_rate then 'Better than open'\n                    when t.price > f.open_rate then 'Worse than open'\n                    else 'Equal to open'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > f.open_rate then 'Better than open'\n                    when t.price < f.open_rate then 'Worse than open'\n                    else 'Equal to open'\n                end\n        end as vs_open_price,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < f.close_rate then 'Better than close'\n                    when t.price > f.close_rate then 'Worse than close'\n                    else 'Equal to close'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > f.close_rate then 'Better than close'\n                    when t.price < f.close_rate then 'Worse than close'\n                    else 'Equal to close'\n                end\n        end as vs_close_price,\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < f.open_rate and t.price < f.close_rate then 'Best price of day'\n                    when t.price > f.open_rate and t.price > f.close_rate then 'Worst price of day'\n                    else 'Middle price of day'\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > f.open_rate and t.price > f.close_rate then 'Best price of day'\n                    when t.price < f.open_rate and t.price < f.close_rate then 'Worst price of day'\n                    else 'Middle price of day'\n                end\n        end as price_performance,\n        -- Calculate relative performance vs market\n        case \n            when t.trade_type = 'BUY' then\n                case\n                    when t.price < f.open_rate and t.price < f.close_rate then\n                        round(((f.close_rate - t.price) / t.price) * 100, 2)\n                    when t.price > f.open_rate and t.price > f.close_rate then\n                        round(((f.close_rate - t.price) / t.price) * 100, 2)\n                    else\n                        round(((f.close_rate - t.price) / t.price) * 100, 2)\n                end\n            when t.trade_type = 'SELL' then\n                case\n                    when t.price > f.open_rate and t.price > f.close_rate then\n                        round(((t.price - f.open_rate) / f.open_rate) * 100, 2)\n                    when t.price < f.open_rate and t.price < f.close_rate then\n                        round(((t.price - f.open_rate) / f.open_rate) * 100, 2)\n                    else\n                        round(((t.price - f.open_rate) / f.open_rate) * 100, 2)\n                end\n        end as relative_performance_pct\n    from trading_books t\n    -- left join forex_metrics f\n    join forex_metrics f\n        on t.ticker = f.currency_pair_name\n        and t.trade_date = f.run_date\n)\n\n-- Combine matched trades P&L with individual trade performance\nselect \n    t.*,\n    m.pnl,\n    m.pnl_usd,\n    m.buy_trade_id,\n    m.sell_trade_id,\n    m.buy_date,\n    m.sell_date,\n    m.buy_price,\n    m.sell_price,\n    m.sell_notes\nfrom trade_pnl t\n-- left join matched_trades_pnl m\njoin matched_trades_pnl m\n    on t.trade_id = m.buy_trade_id\n    or t.trade_id = m.sell_trade_id", "relation_name": "dbt_hol_2025_prod.public_02_intermediate.int_fx_trade_pnl", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:35.733182Z", "completed_at": "2025-06-05T05:18:35.744837Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:35.745489Z", "completed_at": "2025-06-05T05:18:39.731232Z"}], "thread_id": "Thread-15 (worker)", "execution_time": 3.9995596408843994, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a6090470853a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.int_trade_pnl", "compiled": true, "compiled_code": "with equity_trades as (\n    select * from dbt_hol_2025_prod.public_02_intermediate.int_equity_trade_pnl\n),\n\nfx_trades as (\n    select * from dbt_hol_2025_prod.public_02_intermediate.int_fx_trade_pnl\n)\n\nselect * from equity_trades\nunion all\nselect * from fx_trades", "relation_name": "dbt_hol_2025_prod.public_02_intermediate.int_trade_pnl", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:39.737809Z", "completed_at": "2025-06-05T05:18:39.751674Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:39.752307Z", "completed_at": "2025-06-05T05:18:44.441392Z"}], "thread_id": "Thread-17 (worker)", "execution_time": 4.705044984817505, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a60904708556"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.fct_pnl_by_desk", "compiled": true, "compiled_code": "with trade_performance as (\n    select * from dbt_hol_2025_prod.public_02_intermediate.int_trade_pnl\n),\n\n-- Calculate daily P&L metrics by desk and ticker\ndaily_desk_metrics as (\n    select\n        p.desk,\n        p.ticker,\n        p.sell_date as trade_date,\n        case \n            when p.ticker like '%/%' then 'Europe'\n            else 'North America'\n        end as region,\n        count(distinct p.buy_trade_id) as total_trades,\n        sum(p.quantity) as total_quantity,\n        sum(p.pnl_usd) as total_pnl_usd,\n        avg(p.quantity) as avg_trade_size,\n        avg(p.pnl_usd) as avg_pnl_usd,\n        -- Add trading performance metrics\n        avg(p.vs_open_performance_pct) as avg_vs_open_performance_pct,\n        avg(p.vs_close_performance_pct) as avg_vs_close_performance_pct,\n        avg(p.market_daily_performance_pct) as avg_market_performance_pct,\n        avg(p.relative_performance_pct) as avg_relative_performance_pct,\n        count(case when p.price_performance = 'Best price of day' then 1 end) as best_price_trades,\n        count(case when p.price_performance = 'Worst price of day' then 1 end) as worst_price_trades,\n        count(case when p.price_performance = 'Middle price of day' then 1 end) as middle_price_trades\n    from trade_performance p\n    where p.buy_trade_id is not null  -- Only include matched trades\n    group by 1, 2, 3, 4\n),\n\n-- Calculate cumulative metrics\ncumulative_metrics as (\n    select\n        desk,\n        ticker,\n        trade_date,\n        region,\n        total_trades,\n        total_quantity,\n        total_pnl_usd,\n        avg_trade_size,\n        avg_pnl_usd,\n        avg_vs_open_performance_pct,\n        avg_vs_close_performance_pct,\n        avg_market_performance_pct,\n        avg_relative_performance_pct,\n        best_price_trades,\n        worst_price_trades,\n        middle_price_trades,\n        sum(total_pnl_usd) over (partition by desk, ticker order by trade_date) as cumulative_pnl_usd\n    from daily_desk_metrics\n)\n\nselect * from cumulative_metrics", "relation_name": "dbt_hol_2025_prod.public_03_marts.fct_pnl_by_desk", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-05T05:18:44.447778Z", "completed_at": "2025-06-05T05:18:44.461390Z"}, {"name": "execute", "started_at": "2025-06-05T05:18:44.461970Z", "completed_at": "2025-06-05T05:18:48.728630Z"}], "thread_id": "Thread-19 (worker)", "execution_time": 4.282318830490112, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bcd1be-0002-74bf-0000-a60904708576"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_project.fct_pnl_vs_target", "compiled": true, "compiled_code": "with pnl_by_desk as (\n    select * from dbt_hol_2025_prod.public_03_marts.fct_pnl_by_desk\n),\n\nweights as (\n    select * from dbt_hol_2025_prod.public_01_staging.stg_weights\n),\n\n-- Calculate total portfolio value by desk and region\nportfolio_value as (\n    select\n        trade_date,\n        desk,\n        region,\n        sum(total_pnl_usd) as portfolio_value_usd,\n        avg(avg_vs_open_performance_pct) as portfolio_vs_open_performance,\n        avg(avg_vs_close_performance_pct) as portfolio_vs_close_performance,\n        avg(avg_market_performance_pct) as portfolio_market_performance,\n        avg(avg_relative_performance_pct) as portfolio_relative_performance,\n        sum(best_price_trades) as total_best_price_trades,\n        sum(worst_price_trades) as total_worst_price_trades,\n        sum(middle_price_trades) as total_middle_price_trades\n    from pnl_by_desk\n    group by 1, 2, 3\n),\n\n-- Calculate total portfolio value across all desks and regions for each date\ntotal_portfolio_value as (\n    select\n        trade_date,\n        sum(portfolio_value_usd) as total_portfolio_value_usd\n    from portfolio_value\n    group by 1\n),\n\n-- Calculate actual allocations and compare with targets\nallocation_variance as (\n    select\n        pv.trade_date,\n        pv.desk,\n        pv.region,\n        w.target_allocation,\n        pv.portfolio_value_usd,\n        tp.total_portfolio_value_usd,\n        pv.portfolio_vs_open_performance,\n        pv.portfolio_vs_close_performance,\n        pv.portfolio_market_performance,\n        pv.portfolio_relative_performance,\n        pv.total_best_price_trades,\n        pv.total_worst_price_trades,\n        pv.total_middle_price_trades,\n        pv.portfolio_value_usd / nullif(tp.total_portfolio_value_usd, 0) as actual_allocation,\n        (pv.portfolio_value_usd / nullif(tp.total_portfolio_value_usd, 0) - w.target_allocation) as allocation_variance,\n        case\n            when pv.portfolio_value_usd / nullif(tp.total_portfolio_value_usd, 0) > w.target_allocation then 'Overweight'\n            when pv.portfolio_value_usd / nullif(tp.total_portfolio_value_usd, 0) < w.target_allocation then 'Underweight'\n            else 'On Target'\n        end as allocation_status\n    from portfolio_value pv\n    join total_portfolio_value tp\n        on pv.trade_date = tp.trade_date\n    join weights w\n        on pv.desk = w.desk\n        and pv.region = w.region\n)\n\nselect * from allocation_variance", "relation_name": "dbt_hol_2025_prod.public_03_marts.fct_pnl_vs_target", "batch_results": null}], "elapsed_time": 25.335816621780396, "args": {"state_modified_compare_vars": false, "cache_selected_only": false, "target": "prod", "defer": false, "state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "require_resource_names_without_spaces": false, "require_batched_execution_for_custom_microbatch_strategy": false, "which": "run", "favor_state": false, "partial_parse": true, "use_colors": true, "select": [], "invocation_command": "dbt ", "require_nested_cumulative_type_params": false, "exclude": [], "log_path": "/tmp/dbt_output/logs", "partial_parse_file_diff": true, "indirect_selection": "eager", "log_format": "default", "send_anonymous_usage_stats": false, "profiles_dir": "/tmp/dbt/", "require_yaml_configuration_for_mf_time_spines": false, "log_level_file": "debug", "print": true, "skip_nodes_if_on_run_start_fails": false, "source_freshness_run_project_hooks": false, "vars": {}, "printer_width": 80, "version_check": true, "log_format_file": "debug", "strict_mode": false, "populate_cache": true, "static_parser": true, "show_resource_report": false, "project_dir": "/tmp/dbt/", "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "macro_debugging": false, "log_file_max_bytes": 10485760, "empty": false, "introspect": true, "target_path": "/tmp/dbt_output/target/", "log_level": "info", "write_json": true}}